{"name":"Promiser","tagline":"jQuery deferreds by name","body":"# Promiser\r\n\r\n`promiser` is a simple manager of deferreds by name. Rather than creating and maintaining references to `jQuery.Deferred` objects, simply register a handler by name and resolve or reject it by name.\r\n\r\n```javascript\r\npromiser.done('test', function() {\r\n    console.log('hello world');\r\n});\r\n\r\npromiser.resolve('test');\r\n\r\npromiser.isResolved('test'); // true\r\n```\r\n\r\nThe promiser API includes all the methods on the [jQuery Deferred](http://api.jquery.com/category/deferred-object/) object.\r\n\r\nChaining works as expected:\r\n\r\n```javascript\r\npromiser\r\n    .done('test1', function() { ... })\r\n    .done('test2', function() { ... })\r\n    .done('test3', function() { ... });\r\n```\r\n\r\nFor a more elegant approach, an object can be passed:\r\n\r\n```javascript\r\npromiser.done({\r\n    test1: function() { ... },\r\n    test2: function() { ... },\r\n    test3: function() { ... }\r\n});\r\n```\r\n\r\nIt supports the `when` method:\r\n\r\n```javascript\r\npromiser.when('test1', 'test2', 'test3', function() {\r\n    console.log('all done!');\r\n});\r\n```\r\n\r\nPromiser can manage other deferred for you:\r\n\r\n```javascript\r\npromiser.manage('ajax', $.ajax({ ... }));\r\n```\r\n\r\nIt can also stop managing a deferred:\r\n\r\n```javascript\r\nvar xhr = promiser.unmanage('ajax');\r\n```\r\n\r\nYou can even reset a deferred. This provides a clean alternative to passing around references to deferred objects:\r\n\r\n```javascript\r\npromiser.reset('test1');\r\n```\r\n\r\nDeferreds can be watched for when they are initially created. This makes it easy to only execute something if another object needs it:\r\n\r\n```javascript\r\n// Watch for the first time the 'lazy-data' deferrred it bound to\r\npromiser.watch('lazy-data', function() {\r\n    $.ajax({\r\n        success: function(data) {\r\n            promiser.resolve('lazy-data', data);\r\n        },\r\n        error: function(xhr, text, err) {\r\n            promiser.reject('lazy-data', xhr, text, err);\r\n        }\r\n    });\r\n});\r\n\r\n// This executes the watch handler above\r\npromiser.done('lazy-data', function(data) {\r\n    // do something...\r\n});\r\n```\r\n\r\n## Install\r\n\r\n```bash\r\nbower install promiser\r\n```\r\n\r\n## Setup\r\n\r\npromiser.js works in the browser as well as the Node and AMD environments.\r\n\r\n## Usage\r\n\r\nThe `promiser` object can be used three ways:\r\n\r\n**As Is**\r\n\r\n```javascript\r\n// It itself implements the promiser API\r\npromiser.done('foo', function() { ... });\r\n```\r\n\r\n**Constructor**\r\n\r\n```javscript\r\n// Create promiser objects\r\nvar p1 = new promiser;\r\np1 instanceof promiser; // true\r\n```\r\n\r\n**Function**\r\n\r\n```javascript\r\n// Create a new plain object\r\nvar p1 = promiser();\r\n\r\n// Extend an existing object\r\nvar p2 = promiser({});\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}